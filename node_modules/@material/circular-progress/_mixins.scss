//
// Copyright 2020 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

@use "@material/animation/functions" as animation-functions;
@use "@material/feature-targeting/functions" as feature-targeting-functions;
@use "@material/feature-targeting/mixins" as feature-targeting-mixins;
@use "@material/theme/mixins" as theme-mixins;
@use "./variables";
@use "./keyframes";

@mixin core-styles($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $feat-animation: feature-targeting-functions.create-target($query, animation);

  @include color(variables.$color, $query);

  @include feature-targeting-mixins.targets($feat-animation) {
    @include keyframes.container-rotate-keyframes_;
    @include keyframes.spinner-layer-rotate-keyframes_;
    @include keyframes.color-1-fade-in-out-keyframes_;
    @include keyframes.color-2-fade-in-out-keyframes_;
    @include keyframes.color-3-fade-in-out-keyframes_;
    @include keyframes.color-4-fade-in-out-keyframes_;
    @include keyframes.left-spin-keyframes_;
    @include keyframes.right-spin-keyframes_;
  }

  .mdc-circular-progress {
    @include size_(variables.$default-size, $query);

    @include feature-targeting-mixins.targets($feat-structure) {
      display: inline-block;
      position: relative;
      /* @noflip */
      direction: ltr;
    }

    @include feature-targeting-mixins.targets($feat-animation) {
      transition: animation-functions.exit-temporary(opacity, 250ms);
    }
  }

  .mdc-circular-progress--small {
    @include size_(small, $query);
  }

  .mdc-circular-progress--medium {
    @include size_(medium, $query);
  }

  .mdc-circular-progress--large {
    @include size_(large, $query);
  }

  .mdc-circular-progress__determinate-container,
  .mdc-circular-progress__indeterminate-circle-graphic,
  .mdc-circular-progress__indeterminate-container,
  .mdc-circular-progress__spinner-layer {
    @include feature-targeting-mixins.targets($feat-structure) {
      position: absolute;
      width: 100%;
      height: 100%;
    }
  }

  .mdc-circular-progress__determinate-container {
    @include feature-targeting-mixins.targets($feat-structure) {
      transform: rotate(-90deg);
    }
  }

  .mdc-circular-progress__indeterminate-container {
    @include feature-targeting-mixins.targets($feat-structure) {
      opacity: 0;
    }
  }


  .mdc-circular-progress__determinate-circle-graphic,
  .mdc-circular-progress__indeterminate-circle-graphic {
    @include feature-targeting-mixins.targets($feat-structure) {
      fill: transparent;
    }
  }

  .mdc-circular-progress__determinate-circle {
    @include feature-targeting-mixins.targets($feat-animation) {
      transition: animation-functions.enter(stroke-dashoffset, 500ms);
    }
  }

  .mdc-circular-progress__gap-patch {
    @include feature-targeting-mixins.targets($feat-structure) {
      position: absolute;
      top: 0;
      /* @noflip */
      left: 47.5%;
      box-sizing: border-box;
      width: 5%;
      height: 100%;
      overflow: hidden;
    }

    .mdc-circular-progress__indeterminate-circle-graphic {
      @include feature-targeting-mixins.targets($feat-structure) {
        /* @noflip */
        left: -900%;
        width: 2000%;
        transform: rotate(180deg);
      }
    }
  }

  .mdc-circular-progress__circle-clipper {
    @include feature-targeting-mixins.targets($feat-structure) {
      display: inline-block;
      position: relative;
      width: 50%;
      height: 100%;
      overflow: hidden;
    }

    .mdc-circular-progress__indeterminate-circle-graphic {
      @include feature-targeting-mixins.targets($feat-structure) {
        width: 200%;
      }
    }
  }

  .mdc-circular-progress__circle-right {
    .mdc-circular-progress__indeterminate-circle-graphic {
      @include feature-targeting-mixins.targets($feat-structure) {
        /* @noflip */
        left: -100%;
      }
    }
  }

  .mdc-circular-progress--indeterminate {
    .mdc-circular-progress__determinate-container {
      @include feature-targeting-mixins.targets($feat-structure) {
        opacity: 0;
      }
    }

    .mdc-circular-progress__indeterminate-container {
      @include feature-targeting-mixins.targets($feat-structure) {
        opacity: 1;
      }
    }

    @include indeterminate-active-animations_($query);
  }

  .mdc-circular-progress--closed {
    @include feature-targeting-mixins.targets($feat-structure) {
      opacity: 0;
    }
  }
}

// Public mixins

/// Customizes the stroke-color of the indicator. Applies to the
/// determinate variant, and also the indeterminate variant unless the
/// four-color mixin is applied.
/// @param {Color} $color - The desired stroke color.
/// @see {mixin} indeterminate-colors
@mixin color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  .mdc-circular-progress__determinate-circle,
  .mdc-circular-progress__indeterminate-circle-graphic {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop("stroke", $color);
    }
  }
}

/// Applies four animated stroke-colors to the indeterminate indicator.
/// Applicable to the indeterminate variant only and overrides any single color
/// currently set.
/// @param {List} $colors - A list of four desired colors.
/// @see {mixin} color
@mixin indeterminate-colors($colors, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  @if length($colors) != 4 {
    @error "`mdc-circular-progress-colors` accepts exactly 4 colors";
  }

  @for $i from 1 through 4 {
    .mdc-circular-progress__color-#{$i} .mdc-circular-progress__indeterminate-circle-graphic {
      @include feature-targeting-mixins.targets($feat-color) {
        stroke: nth($colors, $i);
      }
    }
  }
}

// Private mixins

/// Sets the container size of the indicator and the stroke width appropriate
/// for the size according to Material Design guidelines. The dimensions are
/// predefined for one of three discrete sizes listed below only.
/// @param {String} $size - Choose from small, medium, or large.
/// @access private
@mixin size_($size, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  $resolved-size: map-get(variables.$container-side-length, $size);

  @include feature-targeting-mixins.targets($feat-structure) {
    width: $resolved-size;
    height: $resolved-size;
  }

  .mdc-circular-progress__determinate-circle-graphic,
  .mdc-circular-progress__indeterminate-circle-graphic {
    @include feature-targeting-mixins.targets($feat-structure) {
      stroke-width: map-get(variables.$stroke-width, $size);
    }
  }

  .mdc-circular-progress__gap-patch .mdc-circular-progress__indeterminate-circle-graphic {
    @include feature-targeting-mixins.targets($feat-structure) {
      stroke-width: map-get(variables.$stroke-width, $size) * .8;
    }
  }
}

/// Sets the animations for the indicator in indeterminate mode.
/// @access private
@mixin indeterminate-active-animations_($query: feature-targeting-functions.all()) {
  $feat-animation: feature-targeting-functions.create-target($query, animation);

  .mdc-circular-progress__indeterminate-container {
    @include feature-targeting-mixins.targets($feat-animation) {
      $duration:
        360deg *
        variables.$arc-time /
        (variables.$arc-start-rotation-interval + (360 - variables.$arc-size));

      animation: mdc-circular-progress-container-rotate $duration linear infinite;
    }
  }

  $spinner-rotate-animation:
    mdc-circular-progress-spinner-layer-rotate
    4 * variables.$arc-time
    variables.$timing-function
    infinite both;

  .mdc-circular-progress__spinner-layer {
    @include feature-targeting-mixins.targets($feat-animation) {
      animation: $spinner-rotate-animation;
    }
  }

  @for $i from 1 through 4 {
    $color-fade-in-out-animation:
      mdc-circular-progress-color-#{$i}-fade-in-out
      4 * variables.$arc-time
      variables.$timing-function
      infinite both;

    .mdc-circular-progress__color-#{$i} {
      @include feature-targeting-mixins.targets($feat-animation) {
        animation:
          $spinner-rotate-animation, $color-fade-in-out-animation;
      }
    }
  }

  .mdc-circular-progress__circle-left .mdc-circular-progress__indeterminate-circle-graphic {
    @include feature-targeting-mixins.targets($feat-animation) {
      animation: mdc-circular-progress-left-spin variables.$arc-time variables.$timing-function infinite both;
    }
  }

  .mdc-circular-progress__circle-right .mdc-circular-progress__indeterminate-circle-graphic {
    @include feature-targeting-mixins.targets($feat-animation) {
      animation: mdc-circular-progress-right-spin variables.$arc-time variables.$timing-function infinite both;
    }
  }
}
