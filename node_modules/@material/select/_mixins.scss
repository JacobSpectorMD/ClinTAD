//
// Copyright 2018 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

@use "sass:list";
@use "sass:string";
@use "@material/animation/variables" as animation-variables;
@use "@material/feature-targeting/functions" as feature-targeting-functions;
@use "@material/feature-targeting/mixins" as feature-targeting-mixins;
@use "@material/floating-label/mixins" as floating-label-mixins;
@use "@material/line-ripple/mixins" as line-ripple-mixins;
@use "@material/notched-outline/mixins" as notched-outline-mixins;
@use "@material/notched-outline/variables" as notched-outline-variables;
@use "@material/ripple/mixins" as ripple-mixins;
@use "@material/ripple/functions" as ripple-functions;
@use "@material/rtl/mixins" as rtl-mixins;
@use "@material/shape/mixins" as shape-mixins;
@use "@material/shape/functions";
@use "@material/theme/mixins" as theme-mixins;
@use "@material/theme/variables" as theme-variables;
@use "@material/typography/mixins" as typography-mixins;
@use "./helper-text/mixins" as helper-text-mixins;
@use "./icon/variables" as icon-variables;
@use "./variables";

@mixin core-styles($query: feature-targeting-functions.all()) {
  @include ripple($query);
  @include without-ripple($query);
}

@mixin without-ripple($query: feature-targeting-functions.all()) {
   $feat-animation: feature-targeting-functions.create-target($query, animation);
   $feat-color: feature-targeting-functions.create-target($query, color);
   $feat-structure: feature-targeting-functions.create-target($query, structure);

  .mdc-select {
    @include container-fill-color(variables.$fill-color, $query: $query);
    @include ink-color(variables.$ink-color, $query: $query);
    @include label-color(variables.$label-color, $query: $query);
    @include bottom-line-color(variables.$bottom-line-idle-color, $query: $query);
    @include helper-text-mixins.helper-text-color(variables.$helper-text-color, $query: $query);

    // Focused state colors
    @include focused-bottom-line-color(primary, $query: $query);
    @include focused-label-color(variables.$focused-label-color, $query: $query);

    // Hover state colors
    @include hover-bottom-line-color(variables.$bottom-line-hover-color, $query: $query);

    // Floating label private mixin
    @include floating-label_($query: $query);

    // structural
    @include shape-radius(small, $query: $query);
    @include padding-horizontal_(
      $left: variables.$anchor-padding-left,
      $left-with-leading-icon: variables.$anchor-padding-left-with-leading-icon,
      $right: variables.$anchor-padding-right,
      $query: $query
    );

    @include feature-targeting-mixins.targets($feat-structure) {
      position: relative; // Menu is absolutely positioned relative to this.
    }

    &__dropdown-icon {
      @include dd-arrow-svg-bg_(variables.$dropdown-color, variables.$dropdown-opacity, $query: $query);

      @include feature-targeting-mixins.targets($feat-structure) {
        @include rtl-mixins.reflexive-property(margin,
          icon-variables.$icon-horizontal-margin,
          icon-variables.$icon-horizontal-margin);
        width: 24px;
        height: 24px;
        align-self: center;
        flex-shrink: 0;
        pointer-events: none;
      }

      @include feature-targeting-mixins.targets($feat-animation) {
        transition: transform variables.$dropdown-transition-duration animation-variables.$standard-curve-timing-function;
      }

      .mdc-select--focused & {
        @include dd-arrow-svg-bg_(theme-variables.prop-value(primary), 1, $query: $query);
      }

      .mdc-select--activated & {
        @include feature-targeting-mixins.targets($feat-structure) {
          transform: rotate(180deg) translateY(-5px);
        }

        @include feature-targeting-mixins.targets($feat-animation) {
          transition: transform variables.$dropdown-transition-duration animation-variables.$standard-curve-timing-function;
        }
      }
    }
  }

  .mdc-select__anchor {
    @include height(variables.$height, $query: $query);
    @include floating-label-mixins.float-position(variables.$label-position-y, $query: $query);

    @include feature-targeting-mixins.targets($feat-structure) {
      display: inline-flex;
      position: relative;
      box-sizing: border-box;
      overflow: hidden;
      outline: none;
      cursor: pointer;
      min-width: 200px;
    }

    @include focused-line-ripple_ {
      &::after {
        @include feature-targeting-mixins.targets($feat-structure) {
          transform: scale(1, 2);
          opacity: 1;
        }
      }
    }
  }

  @include helper-text_($query: $query);
  @include text_($query: $query);

  .mdc-select--outlined {
    @include outlined_($query: $query);
  }

  .mdc-select--invalid {
    @include label-color(variables.$error-color, $query: $query);
    @include bottom-line-color(variables.$error-color, $query: $query);
    @include focused-bottom-line-color(variables.$error-color, $query: $query);
    @include focused-label-color(variables.$error-color, $query: $query);
    @include helper-text-mixins.helper-text-validation-color(variables.$error-color, $query: $query);

    // Hover state colors
    @include hover-bottom-line-color(variables.$error-color, $query: $query);

    &.mdc-select--outlined {
      @include outline-color(variables.$error-color, $query: $query);
      @include hover-outline-color(variables.$error-color, $query: $query);
      @include focused-outline-color(variables.$error-color, $query: $query);
    }

    .mdc-select__dropdown-icon {
      @include dd-arrow-svg-bg_(variables.$error-color, 1, $query: $query);
    }

    // stylelint-disable-next-line plugin/selector-bem-pattern
    + .mdc-select-helper-text--validation-msg {
      @include feature-targeting-mixins.targets($feat-structure) {
        opacity: 1;
      }
    }
  }

  .mdc-select--required {
    // stylelint-disable-next-line plugin/selector-bem-pattern
    .mdc-floating-label::after {
      @include feature-targeting-mixins.targets($feat-structure) {
        content: "*";
      }
    }
  }

  .mdc-select--disabled {
    @include disabled_($query: $query);
  }

  .mdc-select--with-leading-icon {
    @include with-leading-icon_($query: $query);
  }

  .mdc-select__menu .mdc-list .mdc-list-item--selected {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(color, on-surface);
    }
  }

  @include floating-label-mixins.shake-keyframes(
    select-outlined-leading-icon,
    variables.$outlined-label-position-y,
    variables.$outlined-with-leading-icon-label-position-x,
    $query: $query
  );
  @include floating-label-mixins.shake-keyframes(
    select-outlined-leading-icon-rtl,
    variables.$outlined-label-position-y,
    -(variables.$outlined-with-leading-icon-label-position-x),
    $query: $query
  );
}

@mixin ripple($query: feature-targeting-functions.all()) {
  .mdc-select__anchor {
    @include ripple-mixins.surface($ripple-target: variables.$ripple-target, $query: $query);
    @include ripple-mixins.radius-bounded($ripple-target: variables.$ripple-target, $query: $query);
    @include ripple-mixins.states-base-color(variables.$ink-color, $ripple-target: variables.$ripple-target, $query: $query);
    @include ripple-mixins.states-opacities(
      (
        hover: ripple-functions.states-opacity(variables.$ink-color, hover),
        focus: ripple-functions.states-opacity(variables.$ink-color, focus),
      ),
      $ripple-target: variables.$ripple-target,
      $query: $query
    );

    #{variables.$ripple-target} {
      @include ripple-mixins.target-common($query: $query);
    }
  }

  .mdc-select__menu .mdc-list .mdc-list-item--selected {
    @include ripple-mixins.states(on-surface, $query: $query);
  }
}

@mixin ink-color($color, $query: feature-targeting-functions.all()) {
  &:not(.mdc-select--disabled) {
    @include ink-color_($color, $query: $query);
  }
}

@mixin container-fill-color($color, $query: feature-targeting-functions.all()) {
  &:not(.mdc-select--disabled) {
    @include container-fill-color_($color, $query: $query);
  }
}

@mixin focused-label-color($color, $query: feature-targeting-functions.all()) {
  &:not(.mdc-select--disabled) {
    &.mdc-select--focused .mdc-floating-label {
      @include floating-label-mixins.ink-color(theme-variables.prop-value($color), $query: $query);
    }
  }
}

@mixin hover-bottom-line-color($color, $query: feature-targeting-functions.all()) {
  &:not(.mdc-select--disabled):hover {
    @include bottom-line-color_($color, $query: $query);
  }
}

@mixin bottom-line-color($color, $query: feature-targeting-functions.all()) {
  &:not(.mdc-select--disabled) {
    @include bottom-line-color_($color, $query: $query);
  }
}

@mixin focused-bottom-line-color($color, $query: feature-targeting-functions.all()) {
  &:not(.mdc-select--disabled) {
    @include focused-line-ripple-color_($color, $query: $query);
  }
}

@mixin label-color($color, $query: feature-targeting-functions.all()) {
  &:not(.mdc-select--disabled) .mdc-floating-label {
    @include floating-label-mixins.ink-color($color, $query: $query);
  }
}

@mixin outline-color($color, $query: feature-targeting-functions.all()) {
  &:not(.mdc-select--disabled) {
    @include outline-color_($color, $query: $query);
  }
}

@mixin hover-outline-color($color, $query: feature-targeting-functions.all()) {
  &:not(.mdc-select--disabled) {
    @include hover-outline-color_($color, $query: $query);
  }
}

@mixin focused-outline-color($color, $query: feature-targeting-functions.all()) {
  &:not(.mdc-select--disabled) {
    @include focused-outline-color_($color, $query: $query);
  }
}

@mixin shape-radius($radius, $rtl-reflexive: false, $query: feature-targeting-functions.all()) {
  @if list.length($radius) > 2 {
    @error "Invalid radius: '#{$radius}' component doesn't allow customizing all corners";
  }

  $masked-radius: functions.mask-radius($radius, 1 1 0 0);

  .mdc-select__anchor {
    @include shape-mixins.radius(functions.resolve-percentage-radius(variables.$height, $masked-radius), $rtl-reflexive, $query: $query);
  }
}

@mixin outline-shape-radius($radius, $rtl-reflexive: false, $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  $resolved-radius: list.nth(functions.resolve-percentage-radius(variables.$height, functions.prop-value($radius)), 1);

  @if (list.length(functions.prop-value($radius)) > 1) {
    // stylelint-disable-next-line max-line-length
    @warn "mdc-select-outline-shape-radius only supports a single radius; see https://github.com/material-components/material-components-web/issues/4140";
  }

  .mdc-notched-outline {
    @include notched-outline-mixins.shape-radius($resolved-radius, $rtl-reflexive, $query: $query);
  }

  .mdc-select__selected-text {
    @include shape-mixins.radius($resolved-radius, $rtl-reflexive, $query: $query);
  }

  @if ($resolved-radius > notched-outline-variables.$leading-width) {
    .mdc-select__anchor {
      @include feature-targeting-mixins.targets($feat-structure) {
        @include rtl-mixins.reflexive-property(
          padding,
          $resolved-radius + notched-outline-variables.$padding,
          0
        );
      }
    }

    + .mdc-select-helper-text {
      @include feature-targeting-mixins.targets($feat-structure) {
        @include rtl-mixins.reflexive-property(
          margin,
          $resolved-radius + notched-outline-variables.$padding,
          variables.$outline-label-offset
        );
      }
    }
  }
}

// Private
@mixin focused-line-ripple_ {
  &.mdc-select--focused .mdc-line-ripple {
    @content;
  }
}

@mixin focused-outline_ {
  &.mdc-select--focused .mdc-notched-outline {
    @content;
  }
}

@mixin focused-outline-idle_ {
  &.mdc-select--focused {
    @content;
  }
}

@mixin ink-color_($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  .mdc-select__selected-text {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(color, $color);
    }
  }
}

@mixin container-fill-color_($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  .mdc-select__anchor {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(background-color, $color);
    }
  }
}

@mixin bottom-line-color_($color, $query: feature-targeting-functions.all()) {
  .mdc-line-ripple {
    @include line-ripple-mixins.inactive-color($color, $query: $query);
  }
}

@mixin focused-line-ripple-color_($color, $query: feature-targeting-functions.all()) {
  @include focused-line-ripple_ {
    @include line-ripple-mixins.active-color($color, $query: $query);
  }
}

@mixin dd-arrow-svg-bg_($fill-hex-number, $opacity, $query: feature-targeting-functions.all()) {
  // Lookup color and remove leading #.
  $fill-hex-number: theme-variables.prop-value($fill-hex-number);
  $fill-hex-number: string.slice(string.unquote("#{$fill-hex-number}"), 2);

  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include feature-targeting-mixins.targets($feat-structure) {
    // stylelint-disable-next-line function-url-quotes
    background: url('data:image/svg+xml,%3Csvg%20width%3D%2210px%22%20height%3D%225px%22%20viewBox%3D%227%2010%2010%205%22%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%3E%0A%20%20%20%20%3Cpolygon%20id%3D%22Shape%22%20stroke%3D%22none%22%20fill%3D%22%23#{$fill-hex-number}%22%20fill-rule%3D%22evenodd%22%20opacity%3D%22#{$opacity}%22%20points%3D%227%2010%2012%2015%2017%2010%22%3E%3C%2Fpolygon%3E%0A%3C%2Fsvg%3E')
      no-repeat
      center;
  }
}

@mixin outline-color_($color, $query: feature-targeting-functions.all()) {
  @include notched-outline-mixins.color($color, $query: $query);
}

@mixin hover-outline-color_($color, $query: feature-targeting-functions.all()) {
  // stylelint-disable-next-line selector-combinator-space-after
  &:not(.mdc-select--focused) .mdc-select__anchor:hover {
    .mdc-notched-outline {
      @include notched-outline-mixins.color($color, $query: $query);
    }
  }
}

@mixin focused-outline-color_($color, $query: feature-targeting-functions.all()) {
  @include focused-outline_ {
    @include notched-outline-mixins.stroke-width(variables.$outlined-stroke-width, $query: $query);
    @include notched-outline-mixins.color($color, $query: $query);
  }
}

@mixin floating-label_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  .mdc-floating-label {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include rtl-mixins.reflexive-position(left, variables.$outline-label-offset);

      top: 50%;
      transform: translateY(-50%);
      pointer-events: none;
    }
  }

  &.mdc-select--outlined {
    .mdc-floating-label {
      @include feature-targeting-mixins.targets($feat-structure) {
        @include rtl-mixins.reflexive-position(left, notched-outline-variables.$padding);
      }
    }
  }
}

@mixin with-leading-icon_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  $icon-total-width: icon-variables.$icon-size + 2 * icon-variables.$icon-horizontal-margin;

  .mdc-floating-label {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include rtl-mixins.reflexive-position(left, $icon-total-width);
    }
  }

  &.mdc-select--outlined {
    .mdc-floating-label {
      @include feature-targeting-mixins.targets($feat-structure) {
        @include rtl-mixins.reflexive-position(left, $icon-total-width - notched-outline-variables.$leading-width);
      }

      &--float-above {
        @include feature-targeting-mixins.targets($feat-structure) {
          @include rtl-mixins.reflexive-position(left, $icon-total-width - notched-outline-variables.$leading-width);
        }
      }
    }

    @include notched-outline-mixins.floating-label-float-position-absolute(
      variables.$outlined-label-position-y,
      $icon-total-width - icon-variables.$icon-horizontal-margin - notched-outline-variables.$notch-gutter-size,
      $query: $query
    );
    @include floating-label-mixins.shake-animation(select-outlined-leading-icon, $query: $query);

    @include rtl-mixins.rtl {
      @include floating-label-mixins.shake-animation(select-outlined-leading-icon-rtl, $query: $query);
    }
  }

  &.mdc-select__menu .mdc-list-item__text {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include rtl-mixins.reflexive-property(padding, 32px /* left-value */, 32px /* right-value */);
    }
  }
}

@mixin text_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $feat-color: feature-targeting-functions.create-target($query, color);

  .mdc-select__selected-text {
    @include typography-mixins.typography(subtitle1, $query: $query);

    @include feature-targeting-mixins.targets($feat-structure) {
      &::-ms-expand {
        display: none;
      }

      &::-ms-value {
        background-color: transparent;
        color: inherit;
      }

      box-sizing: border-box;
      width: 0;
      flex-grow: 1;
      height: variables.$selected-text-height;
      border: none;
      outline: none;
      padding: 0;
      white-space: nowrap;
      appearance: none;
      pointer-events: none;
      text-overflow: ellipsis;
    }

    @include feature-targeting-mixins.targets($feat-color) {
      background-color: transparent;
      color: inherit; // Override default user agent stylesheet
    }
  }
}

@mixin disabled_($query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include container-fill-color_(variables.$disabled-fill-color, $query: $query);

  .mdc-floating-label {
    @include floating-label-mixins.ink-color(variables.$disabled-label-color, $query: $query);
  }

  .mdc-select__dropdown-icon {
    @include dd-arrow-svg-bg_(variables.$dropdown-color, variables.$disabled-dropdown-opacity, $query: $query);
  }

  .mdc-line-ripple {
    @include line-ripple-mixins.inactive-color(variables.$disabled-ink-color, $query: $query);

    &::before {
      @include feature-targeting-mixins.targets($feat-structure) {
        // TODO(b/146080006): Fix incorrect styling
        border-bottom-style: dotted;
      }
    }
  }

  .mdc-select__icon {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(color, variables.$disabled-icon-color);
    }
  }

  .mdc-select__selected-text {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(color, variables.$disabled-ink-color);
    }

    @include feature-targeting-mixins.targets($feat-structure) {
      pointer-events: none;
    }
  }

  &.mdc-select--outlined {
    @include container-fill-color_(transparent, $query: $query);
    @include outline-color_(variables.$outlined-disabled-border, $query: $query);
  }

  @include feature-targeting-mixins.targets($feat-structure) {
    cursor: default;
    pointer-events: none;
  }
}

@mixin outlined_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $feat-color: feature-targeting-functions.create-target($query, color);

  @include container-fill-color(transparent, $query: $query);
  @include outline-color(variables.$outlined-idle-border, $query: $query);
  @include hover-outline-color(variables.$outlined-hover-border, $query: $query);
  @include focused-outline-color(primary, $query: $query);
  @include outline-shape-radius(small, $query: $query);
  @include container-fill-color(transparent, $query: $query);

  @include feature-targeting-mixins.targets($feat-structure) {
    border: none;
  }

  .mdc-select__anchor {
    @include floating-label-mixins.shake-animation(select-outlined, $query: $query);
    @include notched-outline-mixins.floating-label-float-position-absolute(variables.$outlined-label-position-y, $query: $query);
    @include notched-outline-mixins.notch-offset(notched-outline-variables.$border-width, $query: $query);

    @include feature-targeting-mixins.targets($feat-structure) {
      overflow: visible;
    }
  }

  .mdc-select__selected-text {
    @include feature-targeting-mixins.targets($feat-structure) {
      display: flex;
      border: none;
      z-index: 1;
    }

    @include feature-targeting-mixins.targets($feat-color) {
      background-color: transparent;
    }
  }

  .mdc-select__icon {
    @include feature-targeting-mixins.targets($feat-structure) {
      z-index: 2;
    }
  }

  .mdc-floating-label {
    @include feature-targeting-mixins.targets($feat-structure) {
      line-height: 1.15rem;
      pointer-events: auto;
    }
  }

  &.mdc-select--focused {
    @include notched-outline-mixins.notch-offset(variables.$outlined-stroke-width, $query: $query);
  }
}

@mixin helper-text_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  .mdc-select-helper-text {
    // stylelint-disable plugin/selector-bem-pattern
    .mdc-select__anchor + & {
      @include feature-targeting-mixins.targets($feat-structure) {
        margin-right: 16px;
        margin-left: 16px;
      }
    }
  }

  .mdc-select--focused .mdc-select__anchor + .mdc-select-helper-text:not(.mdc-select-helper-text--validation-msg) {
    @include feature-targeting-mixins.targets($feat-structure) {
      opacity: 1;
    }
  }
}

/// Adds horizontal padding to the selected text
///
/// @param {Number} $left - left side padding
/// @param {Number} $left-with-leading-icon - left-side padding when a leading
///     icon is present
/// @param {Number} $right - right-side padding; note that a trailing icon is
///     always present.
@mixin padding-horizontal_(
  $left,
  $left-with-leading-icon,
  $right,
  $query: feature-targeting-functions.all()
) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  .mdc-select__anchor {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include rtl-mixins.reflexive-property(
        padding,
        $left,
        $right
      );
    }
  }

  &.mdc-select--with-leading-icon .mdc-select__anchor {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include rtl-mixins.reflexive-property(
        padding,
        $left-with-leading-icon,
        $right
      );
    }
  }
}

///
/// Sets height of default select variant.
///
/// @param {Number} $height
/// @param {Number} $minimum-height-for-filled-label Sets the minimum height for
///     filled selects at which to allow floating labels.
/// @param {Number} $filled-baseline-top The baseline from the top of the anchor
///     that the input should be aligned to for a filled variant with a label
/// @access public
///
@mixin height(
  $height,
  $minimum-height-for-filled-label: variables.$minimum-height-for-filled-label,
  $filled-baseline-top: variables.$filled-baseline-top,
  $query: feature-targeting-functions.all()
) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include feature-targeting-mixins.targets($feat-structure) {
    height: $height;
  }

  // Filled variant is aligned to baseline...
  @include typography-mixins.baseline($top: $filled-baseline-top, $display: inline-flex, $query: $query);
  // ...unless it is too small to display a label
  @if $height < $minimum-height-for-filled-label {
    @include center-aligned_($query: $query);

    @include feature-targeting-mixins.targets($feat-structure) {
      &:not(.mdc-select--outlined) {
        .mdc-floating-label {
          display: none;
        }
      }
    }
  }

  // Outlined and no-label variants are always centered
  .mdc-select--outlined &,
  .mdc-select--no-label & {
    @include center-aligned_($query: $query);
  }
}

// Removes filled baseline alignment
@mixin center-aligned_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include feature-targeting-mixins.targets($feat-structure) {
    // In order for a flexbox container to participate in baseline alignment,
    // it follows these rules to determine where its baseline is:
    // https://www.w3.org/TR/css-flexbox-1/#flex-baselines
    //
    // In order to avoid leading icons "controlling" the baseline (since they
    // are the first child), flexbox will generate a baseline from any child
    // flex items that participate in baseline alignment.
    //
    // Icons are set to "align-self: center", while all other children are
    // aligned to baseline. The next problem is deciding which child is
    // used to determine the baseline.
    //
    // According to spec, the item with the largest distance between its
    // baseline and the edge of the cross axis is placed flush with that edge,
    // making it the baseline of the container.
    // https://www.w3.org/TR/css-flexbox-1/#baseline-participation
    //
    // For the filled variant, the pseudo ::before strut is the "largest"
    // child since the input has a height of 28px and the strut is 40px. We
    // can emulate center alignment and force the baseline to use the input
    // text by making the input the full height of the container and removing
    // the baseline strut.
    //
    // IE11 does not respect this, and makes the leading icon (if present)
    // the baseline.
    .mdc-select__selected-text {
      height: 100%;
    }

    &::before {
      display: none;
    }
  }
}
